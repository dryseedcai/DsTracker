import java.text.SimpleDateFormat

apply plugin: 'com.android.library'
apply plugin: 'maven'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'


    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

}

/*
//group和version
group='com.dryseed.timecost'
version='1.0.0'

//打包到本地或者远程Maven库
uploadArchives {
    repositories {
        mavenDeployer {
            //提交到远程服务器：
            // repository(url: "http://www.xxx.com/repos") {
            //    authentication(userName: "admin", password: "admin")
            // }
            //本地的Maven地址设置为E:/Maven
            repository(url: uri('C:/repo'))
        }
    }
}*/


/*
 *************************************************************************************************
 * Remote Maven Start
 */

def getRepositoryUrl(Project project) {
    return 'MAVEN_REPO_URL'.prop(project)
}

def getRepositoryUsername(Project project) {
    return 'MAVEN_USERNAME'.prop(project)
}

def getRepositoryPassword(Project project) {
    return 'MAVEN_PASSWORD'.prop(project)
}

def isRemoteRepo(Project project) {
    String repoUrl = getRepositoryUrl(project)
    return repoUrl.startsWith('http')
}

def getCurrentTime() {
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat('yyyyMMddHHmm', Locale.CHINA)
    simpleDateFormat.setTimeZone(TimeZone.getTimeZone('Asia/Shanghai'))
    return simpleDateFormat.format(new Date())
}

if ('UPLOAD'.prop() != null) {
    group = 'com.iqiyi.video'
    version = '1.0.1'

    /*if ('RELEASE_BUILD'.prop() != 'true') {
        if ('SNAPSHOT'.prop() == 'true') {
            version = "$version-SNAPSHOT".toString()
        } else {
            version = "$version.${getCurrentTime()}".toString()
        }
    }*/

    println("=====> [version:${version}][url:${getRepositoryUrl(project)}][userName:${getRepositoryUsername(project)}][password:${getRepositoryPassword(project)}]")

    afterEvaluate { project ->
        println("=====>")
        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: uri(getRepositoryUrl(project))) {
                        if (isRemoteRepo()) {
                            authentication(
                                    userName: getRepositoryUsername(project),
                                    password: getRepositoryPassword(project))
                        }
                    }

                    pom.project {
                        name 'timecostimp-no-op'
                        artifactId 'timecostimp-no-op'
                        description 'Time Cost Business Realization'
                    }
                }
            }
        }
    }

}
/*
 * Remote Maven End
 *************************************************************************************************
 */

